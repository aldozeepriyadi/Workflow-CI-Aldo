name: ML Model Training Workflow

on:
  push:
    branches:  
     - main 
  workflow_dispatch:

jobs:
  train-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Set up job
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12.2'

      - name: Set up miniconda
        uses: conda-incubator/setup-miniconda@v2
        with:
          auto-activate-base: false
          activate-environment: mlflow-env
          environment-file: MLProject/conda.yaml
          python-version: 3.12.2
          
      - name: Check Env
        shell: bash -l {0}
        run: |
         echo "Current working directory: $(pwd)"
         echo "Python version: $(python --version)"
         echo "MLflow version: $(mlflow --version)"
         echo "Conda environment: $CONDA_DEFAULT_ENV"

      - name: Run mlflow project
        shell: bash -l {0}
        run: |
          cd MLProject
          mlflow run . -P data_path=preprocessing/preprocessed_dataset.csv
          
      - name: Get latest MLflow run_id
        shell: bash -l {0}
        id: get_run_id
        run: |
          echo "Getting run_id from run_id.txt"
          RUN_ID=$(cat MLProject/run_id.txt)
          echo "run_id=$RUN_ID" >> $GITHUB_OUTPUT
          
      # DEBUG: Verify model artifacts exist
      - name: Debug - Check MLflow artifacts
        shell: bash -l {0}
        run: |
          echo "=== Checking MLflow run artifacts ==="
          echo "Run ID: ${{ steps.get_run_id.outputs.run_id }}"
          echo "Current directory: $(pwd)"
          echo "MLProject directory contents:"
          ls -la MLProject/
          echo "MLruns directory structure:"
          ls -la MLProject/mlruns/ || echo "mlruns directory not found"
          echo "=== Checking specific run artifacts ==="
          find MLProject/mlruns -name "${{ steps.get_run_id.outputs.run_id }}" -type d 2>/dev/null || echo "Run directory not found"
          echo "=== Model artifacts in run ==="
          find MLProject/mlruns -path "*/${{ steps.get_run_id.outputs.run_id }}/artifacts/model*" -type f 2>/dev/null || echo "Model artifacts not found"
          echo "=== MLmodel file exists? ==="
          find MLProject/mlruns -name "MLmodel" -path "*/${{ steps.get_run_id.outputs.run_id }}/*" 2>/dev/null || echo "MLmodel file not found"
          echo "=== Complete mlruns structure ==="
          find MLProject/mlruns -type f 2>/dev/null | head -20

      - name: Upload model artifacts
        uses: actions/upload-artifact@v4
        with:
          name: model-artifacts
          path: |
            MLProject
          retention-days: 30

      - name: Verify model artifacts
        run: |
          ls -R MLProject/mlruns

      # IMPROVED: Build Docker Model with better error handling
      - name: Build Docker Model
        shell: bash -l {0}
        run: |
          cd MLProject
          echo "Building Docker image for run_id: ${{ steps.get_run_id.outputs.run_id }}"
          
          # Verify model exists before building
          MODEL_PATH="runs:/${{ steps.get_run_id.outputs.run_id }}/model"
          echo "Checking if model exists at: $MODEL_PATH"
          
          # Try to get model info first
          mlflow models describe -m "$MODEL_PATH" || {
            echo "ERROR: Model not found at $MODEL_PATH"
            echo "Available runs:"
            mlflow runs list
            exit 1
          }
          
          # Build Docker image
          echo "Model verified, building Docker image..."
          mlflow models build-docker -m "$MODEL_PATH" -n "personality:${GITHUB_SHA}" --enable-mlserver || {
            echo "ERROR: Docker build failed"
            echo "Trying alternative build method..."
            mlflow models build-docker -m "$MODEL_PATH" -n "personality:${GITHUB_SHA}"
          }
             
      - name: Log in to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          
      - name: Tag Docker Image
        shell: bash -l {0}
        run: |
          docker tag personality:${GITHUB_SHA} ${{ secrets.DOCKERHUB_USERNAME }}/personality:latest
          docker tag personality:${GITHUB_SHA} ${{ secrets.DOCKERHUB_USERNAME }}/personality:${GITHUB_SHA}

      - name: Push Docker Image
        shell: bash -l {0}
        run: |
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/personality:latest
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/personality:${GITHUB_SHA}
          
      - name: Post Log in to Docker Hub
        run: echo "Docker image pushed successfully to Docker Hub"
          
      - name: Complete job
        run: echo "Workflow completed successfully!"